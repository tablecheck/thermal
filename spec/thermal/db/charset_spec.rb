# frozen_string_literal: true

require_relative '../../spec_helper'

RSpec.describe ::Thermal::Db::Charset do

  describe 'all charsets' do
    let(:expected) do
      {
        0 => "\u0023\u0024\u0025\u002a\u0040\u005b\u005c\u005d\u005e\u0060\u007b\u007c\u007d\u007e",
        1 => "\u0023\u0024\u0025\u002a\u00e0\u00b0\u00e7\u00a7\u005e\u0060\u00e9\u00f9\u00e8\u00a8",
        2 => "\u0023\u0024\u0025\u002a\u00a7\u00c4\u00d6\u00dc\u005e\u0060\u00e4\u00f6\u00fc\u00df",
        3 => "\u00a3\u0024\u0025\u002a\u0040\u005b\u005c\u005d\u005e\u0060\u007b\u007c\u007d\u007e",
        4 => "\u0023\u0024\u0025\u002a\u0040\u00c6\u00d8\u00c5\u005e\u0060\u00e6\u00f8\u00e5\u007e",
        5 => "\u0023\u00a4\u0025\u002a\u00c9\u00c4\u00d6\u00c5\u00dc\u00e9\u00e4\u00f6\u00e5\u00fc",
        6 => "\u0023\u0024\u0025\u002a\u0040\u00b0\u005c\u00e9\u005e\u00f9\u00e0\u00f2\u00e8\u00ec",
        7 => "\u20a7\u0024\u0025\u002a\u0040\u00a1\u00d1\u00bf\u005e\u00b4\u00a8\u00f1\u007d\u007e",
        8 => "\u0023\u0024\u0025\u002a\u0040\u005b\u00a5\u005d\u005e\u0060\u007b\u007c\u007d\u007e",
        9 => "\u0023\u00a4\u0025\u002a\u00c9\u00c6\u00d8\u00c5\u00dc\u00e9\u00e6\u00f8\u00e5\u00fc",
        10 => "\u0023\u0024\u0025\u002a\u00c9\u00c6\u00d8\u00c5\u00dc\u00e9\u00e6\u00f8\u00e5\u00fc",
        11 => "\u0023\u0024\u0025\u002a\u00e1\u00a1\u00d1\u00bf\u00e9\u00b4\u00ed\u00f1\u00f3\u00fa",
        12 => "\u0023\u0024\u0025\u002a\u0040\u00a1\u00d1\u00bf\u00e9\u00fc\u00ed\u00f1\u00f3\u00fa",
        13 => "\u0023\u0024\u0025\u002a\u0040\u005b\u20a9\u005d\u005e\u0060\u007b\u007c\u007d\u007e",
        14 => "\u0023\u0024\u0025\u002a\u017d\u0160\u0110\u0106\u010c\u017e\u0161\u0111\u0107\u010d",
        15 => "\u0023\u04b0\u0025\u002a\u0040\u005b\u005c\u005d\u005e\u0060\u007b\u007c\u007d\u007e",
        16 => "\u20ab\u0024\u0025\u002a\u0040\u005b\u005c\u005d\u005e\u0060\u007b\u007c\u007d\u007e",
        17 => "\u0023\u0024\u066a\u066d\u0040\u005b\u005c\u005d\u005e\u0060\u007b\u007c\u007d\u007e",
        64 => "\u0023\u0024\u0025\u002a\u00a7\u00b0\u00b4\u0022\u00b6\u0060\u00a9\u00ae\u2020\u2122"
      }
    end

    it 'should match' do
      ::Thermal::Db::Data.data['charsets'].select {|_, v| v['charmap'] }.each do |chr, cfg|
        obj = described_class.new(chr, *cfg['charmap'])
        # puts chr
        # puts obj.charmap.inspect
        # puts "#{chr} => \"#{obj.charmap.each_char.map(&:ord).map {|u| "\\u#{u.to_s(16).rjust(4, '0')}" }.join}\","
        expect(obj.charmap.size).to eq 14
        expect(obj.charmap).to eq expected[chr]
      end
    end
  end
end
